{
    "type": "bigglobe:ore",
    "config": {
        "seed": "redstone",
        "blocks": {
            "minecraft:stone": "minecraft:redstone_ore[lit=false]",
            "minecraft:cobblestone": "minecraft:redstone_ore[lit=false]",
            "minecraft:andesite": "universal_ores:andesite_redstone_ore[lit=false]",
            "minecraft:polished_andesite": "universal_ores:andesite_redstone_ore[lit=false]",
            "minecraft:diorite": "universal_ores:diorite_redstone_ore[lit=false]",
            "minecraft:polished_diorite": "universal_ores:diorite_redstone_ore[lit=false]",
            "minecraft:granite": "universal_ores:granite_redstone_ore[lit=false]",
            "minecraft:polished_granite": "universal_ores:granite_redstone_ore[lit=false]",
            "minecraft:calcite": "universal_ores:calcite_redstone_ore[lit=false]",
            "minecraft:tuff": "universal_ores:tuff_redstone_ore[lit=false]",
            "minecraft:deepslate": "minecraft:deepslate_redstone_ore[lit=false]",
            "minecraft:cobbled_deepslate": "minecraft:deepslate_redstone_ore[lit=false]"
        },
        "chance": [
            "if (y <= world_traits.`bigglobe:approximate_surface_y`:",
            "double depthLine  = unmixLinear(128.0L, 256.0L, `bigglobe:approximate_distance_below_surface`)",
            "double depthCurve = 1.0L - 1.0L / (max(depthLine, 0.0L) ^ 2 + 1.0L)",
            "double heatLine   = `bigglobe:overworld/raw/temperature`",
            "double heatCurve  = 1.0L / (fastExp2(2.0L + 4.0L * heatLine) + 1.0L)",
            "return(depthCurve * heatCurve * 0.75L)",
            ")",
            "else if (`bigglobe:islands/is_floating` && y >= world_traits.`bigglobe:skyland_min_y` && y <= world_traits.`bigglobe:skyland_max_y`:",
            "double curve     = ((world_traits.`bigglobe:skyland_max_y` - y) / 64.0L) ^ 2",
            "double heatLine  = `bigglobe:overworld/raw/temperature`",
            "double heatCurve = 1.0L / (fastExp2(2.0L + 4.0L * heatLine) + 1.0L)",
            "return(curve / (curve + 1.0L) * heatCurve * 0.75L)",
            ")",
            "else (",
            "return(0.0L)",
            ")"
        ],
        "radius": {
            "type": "average",
            "min": 2.5,
            "max": 8,
            "average": 3.5
        }
    }
}