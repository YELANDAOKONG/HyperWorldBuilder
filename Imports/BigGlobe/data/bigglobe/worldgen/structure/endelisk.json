{
	"type": "bigglobe:script",
	"biomes": "#bigglobe:has_structure/endelisk",
	"spawn_overrides": {},
	"step": "raw_generation",
	"max_radius_in_chunks": 8,
	"layout": [
		"double*(",
			"radius = random.nextDouble(64.0L, 128.0L)",
			"fullRadius = radius * 2.0L",
			"minY = ceilInt(",
				"+ `bigglobe:end/mountain_center`(originX, originZ)",
				"- `bigglobe:end/bridge_cloud_center_offset`(originX, originZ)",
				"+ `bigglobe:end/bridge_cloud_thickness`(originX, originZ)",
				"+ fullRadius",
			")",
			"maxY = floorInt(",
				"+ `bigglobe:end/mountain_center`(originX, originZ)",
				"+ `bigglobe:end/bridge_cloud_center_offset`(originX, originZ)",
				"- `bigglobe:end/bridge_cloud_thickness`(originX, originZ)",
				"- fullRadius",
			")",
		")",
		"if (maxY <= minY: return())",
		"double originY = random.nextDouble(minY, maxY)",
		"int sideCount = random.nextInt(8, 17)",
		"int rngIndex  = random.nextInt() & 16xFFFF",
		"NbtList sidePositions = nbtList()",
		"for (int sideIndex in range[0, sideCount):",
			"double halton(int base, double*(min, max):",
				"int step = 5",
				"double*(position = min, offset = max - min)",
				"for (int index = sideIndex * step + rngIndex, index > 0, index /= base:",
					"position += (offset :/ base) * (index % base)",
				")",
				"return(position)",
			")",
			"",
			"double x = halton(2, -1.0L, 1.0L)",
			"double y = halton(3, 0.0L, tau)",
			"double r = sqrt(1.0L - x * x) * radius",
			"sidePositions.add(",
				"nbtCompound(",
					"x: float(cos(y) * r),",
					"z: float(sin(y) * r),",
					"y: float(radius * x)",
				")",
			")",
		")",
		"pieces.add(",
			"ScriptStructurePiece.new(",
				"originX - int(fullRadius),",
				"int(originY - fullRadius),",
				"originZ - int(fullRadius),",
				"originX + int(fullRadius),",
				"int(originY + fullRadius),",
				"originZ + int(fullRadius),",
				"'bigglobe:endelisk',",
				"nbtCompound(",
					"radius: float(radius),",
					"sides: sidePositions,",
					"filler: 'minecraft:polished_deepslate',",
					"accent: 'bigglobe:ancient_automata[state=0]'",
				")",
			")",
		")"
	]
}