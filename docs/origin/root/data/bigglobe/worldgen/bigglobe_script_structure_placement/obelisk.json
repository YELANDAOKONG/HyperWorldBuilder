{
	"raw_placement": [
		"int*(",
			"startY   = data.startY",
			"mode     = data.mode",
			"iterMinX = max(minX,   chunkMinX)",
			"iterMinY = max(startY, chunkMinY)",
			"iterMinZ = max(minZ,   chunkMinZ)",
			"iterMaxX = min(maxX,   chunkMaxX)",
			"iterMaxY = min(maxY,   chunkMaxY)",
			"iterMaxZ = min(maxZ,   chunkMaxZ)",
		")",
		"double structureRadius = maxX - midX",
		"BlockState filler = data.filler.asString().as(BlockState)",
		"BlockState accent = data.accent.asString().as(BlockState)",
		"NbtList sides = NbtList(data.sides)",
		"NumberArray noiseSamples = newFloatArray(iterMaxY - iterMinY + 1)",
		"long cloudSeed = worldSeed # 16x457CEC37ECB9EC5EUL",
		"int cloudColorOffset = cloudSeed.newSeed(0).nextInt(12)",
		"int cloudPositionOffset = cloudSeed.newSeed(1).nextInt()",
		"for positionLoop (",
			"int z in range[iterMinZ, iterMaxZ],",
			"int x in range[iterMinX, iterMaxX]",
		":",
			"long xzSeed = cloudSeed.newSeed(x, z)",
			"double horizontalDistance = sqrt((x - midX) ^ 2 + (z - midZ) ^ 2)",
			"float horizontalFraction = 0.0I",
			"float relativeX = x - midX",
			"float relativeZ = z - midZ",
			"for (NbtCompound side in sides:",
				"float sideX = side.x",
				"float sideZ = side.z",
				"float dot = relativeX * sideX + relativeZ * sideZ",
				"float div = sideX ^ 2 + sideZ ^ 2",
				"dot /= div",
				"if (dot > 1.015625I: continue(positionLoop))",
				"horizontalFraction = max(horizontalFraction, dot)",
			")",
			"long columnSeed = (worldSeed # 16x4C0FAE6F7D5286A4UL).newSeed(x, z)",
			"Grid3D('bigglobe:obelisk_noise').getValuesY(worldSeed # 16x47585410AEDBABCAUL, x, iterMinY, z, noiseSamples)",
			"for (int y in range[iterMinY, iterMaxY]:",
				"float bottomFraction = float(unmixLinear(double(startY), double(startY + 16), double(y)))",
				"float verticalFraction = switch (mode:",
					"case (0:",
						"float topFraction = float(unmixLinear(double(maxY - 96), double(maxY), double(y)))",
						"max(horizontalFraction, topFraction * 1.015625I)",
					")",
					"case (1:",
						"float topFraction = float(unmixLinear(double(startY + 16), double(maxY), double(y)))",
						"horizontalFraction + max(topFraction, 0.0I) ^ 2 * 1.015625I",
					")",
					"case (2:",
						"float topFraction = float(unmixLinear(double(maxY - 128), double(maxY), double(y)))",
						"horizontalFraction + max(topFraction * 1.015625I, 0.0)",
					")",
					"default (",
						"horizontalFraction",
					")",
				")",
				"if (verticalFraction < 0.875I && y >= startY + 32:",
					"double index = (y - (startY + 32)) / 8.0L",
					"int intIndex = int(index)",
					"if (intIndex < 12:",
						"double torusRadius = ((reverseBits(cloudPositionOffset + intIndex) >>> 16) / 524288.0L + 0.0625L) * structureRadius",
						"double torusDistance = 0.125L * (horizontalDistance - torusRadius) ^ 2 + 8.0L * (index - intIndex - 0.5L) ^ 2",
						"if (torusDistance < 1.0L:",
							"setBlockState(x, y, z,",
								"xzSeed.newSeed(y).nextInt(32) != 0",
								"? 'bigglobe:cloud'",
								": switch ((intIndex + cloudColorOffset) % 12:",
									"case ( 0: 'bigglobe:red_aura_infused_cloud')",
									"case ( 1: 'bigglobe:orange_aura_infused_cloud')",
									"case ( 2: 'bigglobe:yellow_aura_infused_cloud')",
									"case ( 3: 'bigglobe:yellow_green_aura_infused_cloud')",
									"case ( 4: 'bigglobe:green_aura_infused_cloud')",
									"case ( 5: 'bigglobe:cyan_green_aura_infused_cloud')",
									"case ( 6: 'bigglobe:cyan_aura_infused_cloud')",
									"case ( 7: 'bigglobe:cyan_blue_aura_infused_cloud')",
									"case ( 8: 'bigglobe:blue_aura_infused_cloud')",
									"case ( 9: 'bigglobe:purple_aura_infused_cloud')",
									"case (10: 'bigglobe:magenta_aura_infused_cloud')",
									"case (11: 'bigglobe:magenta_red_aura_infused_cloud')",
									"default ('bigglobe:cloud')",
								")",
							")",
						")",
					")",
				")",
				"else (",
					"float noise = noiseSamples.(y - iterMinY).as(float) * smooth(bottomFraction - 1.0I) * 0.015625I",
					"if (verticalFraction - noise < 1.0I && columnSeed.newSeed(y).nextBoolean(smooth(bottomFraction)):",
						"setBlockState(x, y, z, filler)",
					")",
					"else if (verticalFraction + noise + 0.0625I < 1.0I && bottomFraction > 1.0I:",
						"setBlockState(x, y, z, accent)",
					")",
				")",
			")",
		")"
	],
	"placement": "noop"
}